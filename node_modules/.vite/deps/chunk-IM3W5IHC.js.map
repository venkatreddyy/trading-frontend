{
  "version": 3,
  "sources": ["../../@hookform/resolvers/src/validateFieldsNatively.ts", "../../@hookform/resolvers/src/toNestErrors.ts"],
  "sourcesContent": ["import {\n  get,\n  FieldError,\n  ResolverOptions,\n  Ref,\n  FieldErrors,\n  FieldValues,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n", "import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n  FieldValues,\n  InternalFieldName,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestErrors = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n    const error = Object.assign(errors[path] || {}, {\n      ref: field && field.ref,\n    });\n\n    if (isNameInFieldArray(options.names || Object.keys(errors), path)) {\n      const fieldArrayErrors = Object.assign({}, get(fieldErrors, path));\n\n      set(fieldArrayErrors, 'root', error);\n      set(fieldErrors, path, fieldArrayErrors);\n    } else {\n      set(fieldErrors, path, error);\n    }\n  }\n\n  return fieldErrors;\n};\n\nconst isNameInFieldArray = (\n  names: InternalFieldName[],\n  name: InternalFieldName,\n) => names.some((n) => n.startsWith(name + '.'));\n"],
  "mappings": ";;;;;;AASA,IAAMA,IAAoB,SACxBC,GACAC,IACAC,IAAAA;AAEA,MAAIF,KAAO,oBAAoBA,GAAK;AAClC,QAAMG,KAAQC,IAAIF,IAAQD,EAAAA;AAC1BD,MAAID,kBAAmBI,MAASA,GAAME,WAAY,EAAA,GAElDL,EAAIM,eAAAA;EACL;AACH;AAXA,IAcaC,IAAyB,SACpCL,GACAM,GAAAA;AACQ,MAAAC,KAAAA,SAAAR,IAAAA;AAEN,QAAMS,KAAQF,EAAQG,OAAOV,EAAAA;AACzBS,IAAAA,MAASA,GAAMV,OAAO,oBAAoBU,GAAMV,MAClDD,EAAkBW,GAAMV,KAAKC,IAAWC,CAAAA,IAC/BQ,GAAME,QACfF,GAAME,KAAKC,QAAQ,SAACb,IAAAA;AAAqB,aACvCD,EAAkBC,IAAKC,IAAWC,CAAAA;IAAO,CAAA;EAG9C;AATD,WAAWD,MAAaO,EAAQG;AAAMF,IAAAA,GAAAR,EAAAA;AAUxC;AA5BA,ICEaa,IAAe,SAC1BZ,IACAM,IAAAA;AAEAA,EAAAA,GAAQO,6BAA6BR,EAAuBL,IAAQM,EAAAA;AAEpE,MAAMQ,IAAc,CAAA;AACpB,WAAWC,KAAQf,IAAQ;AACzB,QAAMQ,IAAQN,IAAII,GAAQG,QAAQM,CAAAA,GAC5Bd,IAAQe,OAAOC,OAAOjB,GAAOe,CAAAA,KAAS,CAAE,GAAE,EAC9CjB,KAAKU,KAASA,EAAMV,IAAAA,CAAAA;AAGtB,QAAIoB,EAAmBZ,GAAQa,SAASH,OAAOI,KAAKpB,EAAAA,GAASe,CAAAA,GAAO;AAClE,UAAMM,IAAmBL,OAAOC,OAAO,CAAA,GAAIf,IAAIY,GAAaC,CAAAA,CAAAA;AAE5DO,UAAID,GAAkB,QAAQpB,CAAAA,GAC9BqB,IAAIR,GAAaC,GAAMM,CAAAA;IACxB;AACCC,UAAIR,GAAaC,GAAMd,CAAAA;EAE1B;AAED,SAAOa;AACT;AD1BA,IC4BMI,IAAqB,SACzBC,GACAI,GAAAA;AAAuB,SACpBJ,EAAMK,KAAK,SAACC,IAAAA;AAAM,WAAAA,GAAEC,WAAWH,IAAO,GAAA;EAAI,CAAA;AAAC;",
  "names": ["setCustomValidity", "ref", "fieldPath", "errors", "error", "get", "message", "reportValidity", "validateFieldsNatively", "options", "_loop", "field", "fields", "refs", "forEach", "toNestErrors", "shouldUseNativeValidation", "fieldErrors", "path", "Object", "assign", "isNameInFieldArray", "names", "keys", "fieldArrayErrors", "set", "name", "some", "n", "startsWith"]
}
