{
  "version": 3,
  "sources": ["../../@hookform/resolvers/yup/src/yup.ts"],
  "sourcesContent": ["import * as Yup from 'yup';\nimport { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport {\n  appendErrors,\n  FieldError,\n  FieldValues,\n  Resolver,\n} from 'react-hook-form';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport function yupResolver<TFieldValues extends FieldValues>(\n  schema:\n    | Yup.ObjectSchema<TFieldValues>\n    | ReturnType<typeof Yup.lazy<Yup.ObjectSchema<TFieldValues>>>,\n  schemaOptions: Parameters<(typeof schema)['validate']>[1] = {},\n  resolverOptions: {\n    /**\n     * @default async\n     */\n    mode?: 'async' | 'sync';\n    /**\n     * Return the raw input values rather than the parsed values.\n     * @default false\n     */\n    raw?: boolean;\n  } = {},\n): Resolver<Yup.InferType<typeof schema>> {\n  return async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.raw ? values : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestErrors(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;AA4CgB,SAAAA,EACdC,IAGAC,IACAC,GAAAA;AAYA,SAAA,WAbAD,OAAAA,KAA4D,CAAE,IAAA,WAC9DC,MAAAA,IAUI,CAAA,IAEUC,SAAAA,GAAQC,IAASC,GAAAA;AAAW,QAAA;AAAA,aAAAC,QAAAC,QAAAA,SAAAA,GAAAA,GAAAA;AAAAA,YAAAA;AAAAA,cAAAA,KAElCN,GAAcG,WAAoC,QAEpDI,QAAQC,KACN,+FAAA,GAEHH,QAAAC,QAEoBP,GACM,WAAzBE,EAAgBQ,OAAkB,iBAAiB,UAAA,EAEnDP,GACAQ,OAAOC,OAAO,EAAEC,YAAAA,MAAY,GAASZ,IAAe,EAAEG,SAAAA,GAAAA,CAAAA,CAAAA,CAAAA,EACvDU,KAAAA,SALKC,IAAAA;AASN,mBAFAV,EAAQW,6BAA6BC,EAAuB,CAAE,GAAEZ,CAAAA,GAEzD,EACLF,QAAQD,EAAgBgB,MAAMf,IAASY,IACvCI,QAAQ,CAAA,EAAA;UACR,CAAA;QAAA,SAAA,GAAA;AAAA,iBAAA,EAAA,CAAA;QAAA;AAAA,eAAA,KAAA,EAAA,OAAA,EAAA,KAAA,QAAA,CAAA,IAAA;MAAA,EArBoC,GAAA,SAsB/BC,GAAAA;AACP,YAAA,CAAKA,EAAEC;AACL,gBAAMD;AAGR,eAAO,EACLjB,QAAQ,CAAE,GACVgB,QAAQG,GA5EdC,KA8EUH,GA7EVI,KAAAA,CA8EWnB,EAAQW,6BACkB,UAAzBX,EAAQoB,eA7EZF,GAAMF,SAAS,CAAA,GAAIK,OACzB,SAACC,IAAUJ,GAAAA;AAKT,cAJKI,GAASJ,EAAMK,IAAAA,MAClBD,GAASJ,EAAMK,IAAAA,IAAS,EAAEC,SAASN,EAAMM,SAASC,MAAMP,EAAMO,KAAAA,IAG5DN,IAA0B;AAC5B,gBAAMO,KAAQJ,GAASJ,EAAMK,IAAAA,EAAOG,OAC9BC,KAAWD,MAASA,GAAMR,EAAMO,IAAAA;AAEtCH,YAAAA,GAASJ,EAAMK,IAAAA,IAASK,aACtBV,EAAMK,MACNJ,IACAG,IACAJ,EAAMO,MACNE,KACK,CAAA,EAAgBE,OAAOF,IAAsBT,EAAMM,OAAAA,IACpDN,EAAMM,OAAAA;UAEb;AAED,iBAAOF;QACT,GACA,CAAA,CAAA,IAwDMtB,CAAAA,EAAAA;AAnFe,YACvBkB,IACAC;MAoFG,CAAA,CAAA;IACH,SAACJ,GAAAA;AAAA,aAAAd,QAAA6B,OAAAf,CAAAA;IACH;EAAA;AAAA;",
  "names": ["yupResolver", "schema", "schemaOptions", "resolverOptions", "values", "context", "options", "Promise", "resolve", "console", "warn", "mode", "Object", "assign", "abortEarly", "then", "result", "shouldUseNativeValidation", "validateFieldsNatively", "raw", "errors", "e", "inner", "toNestErrors", "error", "validateAllFieldCriteria", "criteriaMode", "reduce", "previous", "path", "message", "type", "types", "messages", "appendErrors", "concat", "reject"]
}
